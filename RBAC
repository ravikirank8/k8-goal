question : 
reate the necessary roles and role bindings required for the dev-user to create, list and delete pods in the default namespace.

Use the given spec:
Role: developer

Role Resources: pods

Role Actions: list

Role Actions: create

Role Actions: delete

RoleBinding: dev-user-binding

RoleBinding: Bound to dev-use

a)
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: default
  name: developer
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["pods"]
  verbs: ["create", "delete", "list"]
  
  apiVersion: rbac.authorization.k8s.io/v1
# This role binding allows "jane" to read pods in the "default" namespace.
# You need to already have a Role named "pod-reader" in that namespace.
kind: RoleBinding
metadata:
  name: dev-user-binding
  namespace: default
subjects:
# You can specify more than one "subject"
- kind: User
  name: dev-user # "name" is case sensitive
  apiGroup: rbac.authorization.k8s.io
roleRef:
  # "roleRef" specifies the binding to a Role / ClusterRole
  kind: Role #this must be Role or ClusterRole
  name: developer # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io
  
  
  ResourcenAME: TO APPLY RESOURCE TO CERTAIN PODS ONLY
   kubectl describe  role -n blue
   EDIT ROLES  IN ROLES 
Name:         developer
Labels:       <none>
Annotations:  <none>
PolicyRule:
  Resources  Non-Resource URLs  Resource Names   Verbs
  ---------  -----------------  --------------   -----
  pods       []                 [blue-app]       [get watch create delete]
  pods       []                 [dark-blue-app]  [get watch create delete]
  
  
  
  
  
  
  
  
  
  =================================



kubectl top pod --sort-by='memory'
 kubectl top pod --sort-by='memory' --no-headers | head -1
 kubectl get pod 
Inspect the environment and identify the authorization modes configured on the cluster.
 kubectl describe  po kube-apiserver-controlplane  -n kube-system
Use the command kubectl describe pod kube-apiserver-controlplane -n kube-system and look for --authorization-mode

 kubectl get roles
 kubectl get roles -A
 kubectl describe role kube-proxy -n kube-system
 
 Which account is the kube-proxy role assigned to?
kubectl describe rolebinding kube-proxy -n kube-system

kubectl describe rolebinding kube-proxy -n kube-system

A user dev-user is created. User's details have been added to the kubeconfig file. 
Inspect the permissions granted to the user. Check if the user can list pods in the default namespace.

kubectl get pods --as dev-user
Use the --as dev-user option with kubectl to run commands as the dev-user
Error from server (Forbidden): pods is forbidden: User "dev-user" cannot list resource "pods" in API group "" in the namespace "default"
Here he doesn't have the permission to get the pods

===
Improtant 

Create the necessary roles and role bindings required for the dev-user to create, list and delete pods in the default namespace.

Use the given spec:
Role: developer
Role Resources: pods
Role Actions: list
Role Actions: create
Role Actions: delete
RoleBinding: dev-user-binding
RoleBinding: Bound to dev-user

==>
controlplane ~ ➜  kubectl create role developer -n default --verb=list,create,delete --resource=pods
role.rbac.authorization.k8s.io/developer created

controlplane ~ ➜  kubectl get role
NAME        CREATED AT
developer   2023-02-01T10:22:09Z

controlplane ~ ➜  kubectl describe role developer
Name:         developer
Labels:       <none>
Annotations:  <none>
PolicyRule:
  Resources  Non-Resource URLs  Resource Names  Verbs
  ---------  -----------------  --------------  -----
  pods       []                 []              [list create delete]
  

Creating rolebinding

controlplane ~ ✖ kubectl create rolebinding dev-user-binding -n default --role=developer --user=dev-user
rolebinding.rbac.authorization.k8s.io/dev-user-binding created

controlplane ~ ➜  kubectl get rolebinding
NAME               ROLE             AGE
dev-user-binding   Role/developer   2m57s

controlplane ~ ➜  kubectl describe rolebinding
Name:         dev-user-binding
Labels:       <none>
Annotations:  <none>
Role:
  Kind:  Role
  Name:  developer
Subjects:
  Kind  Name      Namespace
  ----  ----      ---------
  User  dev-user  
  
  
  ==============================================================================
  A set of new roles and role-bindings are created in the blue namespace for the dev-user. 
  However, the dev-user is unable to get details of the dark-blue-app pod in the blue namespace. Investigate and fix the issue.

We have created the required roles and rolebindings, but something seems to be wrong.

controlplane ~ ➜  kubectl describe rolebindings dev-user-binding
Name:         dev-user-binding
Labels:       <none>
Annotations:  <none>
Role:
  Kind:  Role
  Name:  developer
Subjects:
  Kind  Name      Namespace
  ----  ----      ---------
  User  dev-user  
==
kubectl describe  role developer  -n blue
Name:         developer
Labels:       <none>
Annotations:  <none>
PolicyRule:
  Resources  Non-Resource URLs  Resource Names  Verbs
  ---------  -----------------  --------------  -----
  pods       []                 [blue-app]      [get watch create delete]

controlplane ~ ➜  kubectl edit  role developer  -n blue
role.rbac.authorization.k8s.io/developer edited

Resorce name mismatch rey
================

Add a new rule in the existing role developer to grant the dev-user permissions to create deployments in the blue namespace.

Remember to add api group "apps".

Remember to add api group "apps".

kubectl edit role developer -n blue

add resourcename as deployment

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: developer
  namespace: blue
rules:
- apiGroups:
  - apps
  resourceNames:
  - dark-blue-app
  resources:
  - pods
  verbs:
  - get
  - watch
  - create
  - delete
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - get
  - watch
  - create
  - delete




================
you will see that there is a default service account that exists already. For every namespace in kubernetes a
service account named default is automatically created. Each namespace has its own . when pod is created it link defualt service account with token

create a pod to link to service account 
apiVersion:
kind:
metadata:
spec:
pod-definition.yml
v1
Pod
name: my-kubernetes-dashboard
containers:
- name: my-kubernetes-dashboard
image: my-kubernetes-dashboard
serviceAccount: dashboard-sa

automountServiceAccountToken : false
kubectl create sa  dashboard-sa

kubectl create token dashboard-sa


you shouldn't have to copy and paste the token each time. The Dashboard application is programmed to read token from the secret mount location. However currently, the default service account is mounted. 
Update the deployment to use the newly created ServiceAccount

Edit the deployment to change ServiceAccount from default to dashboard-sa.
serviceAccountName: dashboard-sa

other way kubectl set serviceaccount deploy/web-dashboard dashboard-sa

kubectl create secret docker-registry private-reg-cred --docker-username=dock_user --docker-password=dock_password --docker-server=myprivateregistry.com:5000 --docker-email=dock_user@myprivateregistry.com

The User ID defined in the securityContext of the POD is carried over to all the containers in the Pod


===================================

clusterroles and clusterrolebindings

controlplane ~ ✖ kubectl describe clusterroles cluster-admin
Name:         cluster-admin
Labels:       kubernetes.io/bootstrapping=rbac-defaults
Annotations:  rbac.authorization.kubernetes.io/autoupdate: true
PolicyRule:
  Resources  Non-Resource URLs  Resource Names  Verbs
  ---------  -----------------  --------------  -----
  *.*        []                 []              [*]
             [*]                []              [*]

controlplane ~ ➜  kubectl describe clusterrolebindings cluster-admin
Name:         cluster-admin
Labels:       kubernetes.io/bootstrapping=rbac-defaults
Annotations:  rbac.authorization.kubernetes.io/autoupdate: true
Role:
  Kind:  ClusterRole
  Name:  cluster-admin
Subjects:
  Kind   Name            Namespace
  ----   ----            ---------
  Group  system:masters 
  
  question
  
  A new user michelle joined the team. She will be focusing on the nodes in the cluster.
  Create the required ClusterRoles and ClusterRoleBindings so she gets access to the nodes.
  






















