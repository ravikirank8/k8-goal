Author : Ravi Ravada
=============================================================================================================================================
POD:

kubectl  get po -o wide

kubectl run redis --image=redis123 --dry-run=client -o yaml > redis-definition.yaml

kubectl run busybox ubuntu-sleeper-2 --image=busybox --command sleep 5000 --dry-run -o yaml

kubectl run busybox --image=busybox --restart=Never -o yaml --dry-run=client  -- /bin/sh -c   'while true;do echo amobee;sleep  5;done' > pod1.yaml

kubectl run ubuntu-sleeper-3  --image=ubuntu --command sleep 1200

kubectl create -f redis-definition.yaml 

kubectl run busybox --image=busybox  -o yaml --dry-run=client  -- /bin/sh -c   'echo hello world;sleep 3600' > pod1.yaml

kubectl run busybox --image=busybox --restart=Never -o yaml --dry-run=client  -- /bin/sh -c   'while true;do echo amobee;sleep  5;done' > pod1.yaml

rs : kubectl edit replicaset new-replica-set
kubectl  get rs
kubectl get rc

kubectl scale rs new-replica-set --replicas=2

kubectl logs  -f busybox -c busybox

kubectl exec busybox -c busybox -- ls
==================================================================
Namespaces ( pratice agin)
============
kubectl create namespace mynamespace

kubectl get po -n research

kubectl config set-context --current --namespace=prod

kubectl run nginx --image=nginx --restart=Never -n mynamespace


kubectl create -f pod-definition.yaml -n dev

kubectl get pod -n kube-system

kubectl create -f pod-definition.yaml --n dev

kubectl get pods -n dev

kubectl config view | grep namespaces

 kubectl api-resources  --namespaced=false
 
#TO SET CURRENT NAMESPACE
kubectl config set-context --current --namespace=prod

kubectl create namespace mynamespace

kubectl run nginx --image=nginx --restart=Never -n mynamespace

 kubectl run nginx2 --image=nginx --port=80  --dry-run=client -o yaml > namespae.yml

kubectl get po --all-namespaces
kubectl run nginx --image=nginx --restart=Never --port=80

Since the blue application and the db-service are in different namespaces. 
In this case, we need to use the service name along with the namespace to access the database. 
The FQDN (fully Qualified Domain Name) for the db-service in this example would be db-service.dev.svc.cluster.local.

Note: You can also access it using the service name and namespace like this: db-service.dev


 ============================================================================================================
 Services
 
 https://kubernetes.io/docs/tasks/manage-kubernetes-objects/imperative-config/

kubectl create deploy webserver  --image=nginx   --dry-run=client -o yaml
kubectl expose deployment webserver --port=8080 --target-port=8080 --type=Nodeport --dry-run=client -o yaml

iptables -n -t nat -L KUBE-SERVICES

kubectl expose deployment simple-webapp-deployment   --target-port=8080  --port=8080 --type=NodePort --dry-run=client -o yaml > b.yml
apiVersion: v1
kind: Service
metadata:
  name: webapp-service
spec:
  type: NodePort
  ports:
  - port: 8080
    targetPort: 8080
    nodePort: 30080
  selector:
    name: simple-webapp
 
 
 =================================================
 
 Lables and Selectors:
 ======================
 
kubectl get pods --show-labels | grep -i prod
 
kubectl run fronend1 --image=nginx --restart=Never --labels=env=prod,team=techops
 
kubectl run fronend3 --image=nginx --restart=Never --labels=env=prod,team=noc
  
kubectl run fronend3 --image=nginx --restart=Never --labels=env=prod,team=cms
  
kubectl get pods -l 'team in(noc,techops)'  --show-labels

 kubectl get pods -l env=prod
=================================================================================

annnotation:
============

kubectl annotate pod/fronend contact="noc"
=====================

Environment:
============


Of course, we have solved this problem. You can use environment variables and configuration files to store this information in a “central location” and reference 
these from our app. When you want to change the configuration, simply change it in the file or change the environment variable, 
and you are good to go! No need to hunt down every location where the data is referenced.

 kubectl run busybox --image=busybox  --env=team=noc  -o yaml --dry-run=client  -- /bin/sh -c   'echo hello world;sleep 3600' > pod2.yaml

 kubectl exec busybox -- printenv

 kubectl exec -it busybox -- env

 kubectl exec -it busybox -- /bin/sh




 
 
 =============================================================================================
 
 
 kubectl run fronend --image=nginx --restart=Never --labels=env=prod,team=amobee --dry-run=client -o yaml

 kubectl run fronend --image=nginx --restart=Never --labels=env=dev,team=turn,app=2.0 --dry-run=client -o yaml

  kubectl run fronend --image=nginx --restart=Never --labels=env=prod,team=noc
 
  kubectl run fronend1 --image=nginx --restart=Never --labels=env=prod,team=techops,app=v2.0
 
  kubectl run fronend3 --image=nginx --restart=Never --labels=env=prod,team=techops,app=amobee
 
 kubectl run fronend4 --image=nginx --restart=Never --labels=env=prod,team=turn
 
 kubectl get pods -l 'team in(noc,techops)'   --show-labels
    
  kubectl get po --show-labels  
   
  kubectl get pods -l 'team in(noc,techops)',env=prod  --show-labels
  
  

 
Deployment
==============

 kubectl create deploy httpd1 --image=vadisala/rvadisala_docker_repo:nginx-custom --replicas=2 --dry-run=client -o yaml


kubectl create deployment my-dep --image=nginx --replicas=3 --dry-run=client -o yaml
 
kubectl scale deploy my-dep  --replicas=5

kubectl get po

kubectl describe deploy nginx

kubectl create deploy nginx --image=nginx:1.18.0 --replicas=2 --port=80

kubectl create deploy nginx --image=nginx:1.18.0 --replicas=2 --port=80 --dry-run=client  -o yaml > a.yml

kubectl scale --replicas=7 rs nginx

kubectl edit rs nginx

kubectl get rc
kubectl get deploy
kubectl get deploy nginx -o yaml

kubectl autoscale rs web --max=5
kubectl autoscale deploy nginx  --max=10 --min=3 --cpu-percent=50

kubectl taint nodes  mildevkub020 node-role.kubernetes.io/master-

https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough/
============================================================================================================
Rollback:
=========

Kubernetes Rolling:
Check how the deployment rollout is going
kubectl rollout status deploy nginx

check max unavialbe below rollingstargey

kubectl edit deploy nameofdeploy

we change type: Recreate | RollingUpdate and set the image

kubectl set image deploy nginx nginx=nginx:1.19.8

kubectl edit deploy nginx

Check the rollout history and confirm that the replicas are OK

kubectl rollout history deploy nginx
kubectl rollout undo deploy nginx

kubectl get deploy nginx
kubectl get rs  # check that a new replica set has been created
kubectl get po
kubectl scale --replicas=7 rs nginx



==============================================================================================================

Scheduler
=======
 
kubectl run busybox --image=busybox  -o yaml --dry-run=client  -- /bin/sh -c   'echo hello world;sleep 3600' > pod1.yaml

Multicontainers

// create the pod

kubectl create -f simple-pod.yml// access logs

kubectl logs busybox -c busybox1
kubectl logs busybox -c busybox2
kubectl logs busybox -c busybox3// exec into running containers


Mutlicontainer in POD
========================

kubectl run busybox --image=busybox  -o yaml --dry-run=client  -- /bin/sh -c   'echo hello world;sleep 3600' > pod2.yaml

kubectl exec -it busybox -- /bin/bas

images u can use for minimal container
=========================================

alpine
busybox
centos:latest 
ubuntu:20.04

kubectl exec -it busybox -c busybox1 /bin/sh
kubectl exec -it busybox -c busybox2 /bin/sh
kubectl exec -it busybox -c busybox3 /bin/sh



 kubectl run busybox --image=busybox  -o yaml --dry-run=client  -- /bin/sh -c   'echo hello world;sleep 3600' > pod2.yaml


kubectl exec -it busybox -- /bin/bash


================================================



==========================================

Config maps

kubectl create cm mycm --from-file=a.txt
kubectl get cm
kubectl describe cm mycm

kubectl create configmap webapp-config-map --from-literal=APP_COLOR=darkblue

kubectl create cm mycm --from-file=a.txt --dry-run=client -o yaml

We see this using by creating it using test pod

kubectl create cm variables --from-file=variables

 kubectl run busybox --image=busybox  --env=team=noc  -o yaml --dry-run=client  -- /bin/sh -c   'echo hello world;sleep 3600' > pod2.yam

kubectl exec -it busybox -- env

kubectl get cm -o yaml

    
kubectl create secret generic sec --from-file=ssh-private=/root/.ssh/known_hosts --from-literal=passphrase=ravikiran

 kubectl create secret generic db-user-pass  --from-file=a.txt  --from-file=pass.txt --dry-run=client -o yaml

kubectl create secret generic sec --from-file=usercred=ravikiran --from-literal=passphrase=ravikiran300 --dry-run=client -o yaml

